require import Option List.
require (*  *) Helios_mix_ord DiffieHellman.
require import Distr NewDistr Perms Int IntExtra FMap FSet Real Pair Mu_mem. 
require import LeftOrRight.

(* the space for the secret key and public key *)
  clone export CyclicGroup as Ksp.
  type skey = t.
  type pkey = group.

(*  ---------------------------------------------------------------------- *)
(* voter identity *)
type ident.

(* ---------------------------------------------------------------------- *)
(* 1. Flabel: empty *)
  ##1

(* ---------------------------------------------------------------------- *)
(* 2. Publish: full view on the last ballot for any id  *)

  type h_cipher, h_stm, h_prf, h_in, h_out, h_data.

  (* check if there exists a ballot in bb, that containst this identity id *)
  op exists_id (id: ident, bb: (ident * label * (h_cipher * h_prf* h_data)) list) =
    with bb = [] => false
    with bb = b:: bb' => (id = b.`1) \/ (exists_id id bb').

  (* keep the last ballot for any id *)
  op keep_last(bb: (ident * label * (h_cipher * h_prf* h_data)) list)=
    with bb = "[]"      => []
    with bb = (::) b bb' => if (exists_id b.`1 bb')
                         then keep_last bb'
                         else b :: keep_last bb'.

  ##2


(* ---------------------------------------------------------------------- *)
(* 3. Rho: multiset( policy)   *)

  (* last vote policy *)
  op last_vote['a] (bb : (ident * 'a) list) =
    with bb = "[]"      => []
    with bb = (::) b bb => if   has (Fun.(\o) (pred1 b.`1) fst) bb
                         then last_vote bb
                         else b :: last_vote bb.
  (* first vote policy *)
  op first_vote['a] (bb : (ident * 'a) list) =
    rev (last_vote (rev bb)). 
  (* keep all votes policy *)
  op all_votes['a] (bb :(ident * 'a) list) =
    bb.

  ##3O 

(* ---------------------------------------------------------------------- *)
(* 5. ValidInd - part 1 operator: *) 

op to_statement: pkey -> label -> h_cipher -> h_stm.
op verify : h_stm -> h_prf -> (h_in, h_out) map -> bool.

op check_proof (pk: pkey, 
                b : (ident * label * (h_cipher* h_prf* h_data)), 
                ro: (h_in, h_out) map)
   = verify (to_statement pk b.`2 b.`3.`1) b.`3.`2 ro.

op check_nothing (pk: pkey, 
                  b : (ident * label * (h_cipher* h_prf* h_data)), 
                  ro: (h_in, h_out) map) 
   = true.

  ##5O


clone export Helios_mix_ord as HMG with
  type pkey       <- pkey,
  type skey       <- skey,
  type label      <- label,
  type ident      <- ident,
  type h_stm      <- h_stm,
  type h_in       <- h_in,
  type h_out      <- h_out,
  type h_data     <- h_data,
  type h_cipher   <- h_cipher,
  type h_prf      <- h_prf,
  type pubBB      <- pubBB,
  op HM.verify       <- verify,
  op HM.to_statement <- to_statement,
  op HM.MV2.Publish      <- Publish,
  op HM.MV2.Flabel       <- Flabel,
  op HM.MV2.validInd     <- validInd,
  op Policy['a] <- (fun x => Policy x). 

(* ---------------------------------------------------------------------- *)
(* 5. ValidInd - part 2 function: *) 
module ValidProof(Ve:PSpke.Verifier, H: Ipke.ARO) = {
  proc validInd( b: (ident * label * cipher), pk: pkey): bool ={
    var ev;
    ev <@ Ve(H).verify(to_statement pk b.`2 b.`3.`1, b.`3.`2);
    return ev;
  }
}.

module ValidNothing(Ve:PSpke.Verifier, H: Ipke.ARO) = {
  proc validInd( b: (ident * label * cipher), pk: pkey): bool ={
    return true;
  }
}.

  ##5M


(* ---------------------------------------------------------------------- *)
(* 4. Relation options *)

##4M

(* Based on the options selected we use the correct part of the proof. *)
(* Relation proof *)
lemma relCons (Pe<: PSpke.Prover) (Ve<: PSpke.Verifier {HRO.RO} ):
  islossless Ve(HRO.RO).verify =>
  forall (gh : (glob HRO.RO)),
    phoare[ DecRel(Pe, Ve, IPKE(Pe, Ve), HRO.RO).main :
             (glob HRO.RO) = gh ==> (glob HRO.RO) = gh] = 1%r.
proof.
  move => Ve_ll gh.
  ##4L1
qed.

(* ---------------------------------------------------------------------- *)
(* Helios Version 3 with mix-nets and true identities *) 
module HeliosMixGeneric
                   (Pe : PSpke.Prover, Ve: PSpke.Verifier, 
                    Ve2: PSpke.Verifier,
                    Pz : Prover,  Vz: Verifier,
                    H  : HOracle.ARO,   G: GOracle.ARO)  
    = HeliosMix(Pe,Ve, ValidInd(Ve2), Pz, Vz, H, G).

(* Security Properties: BPRIV, Strong Consistency, Strong Correctness *)
section Security.

declare module Cv: PSpke.Verifier { BP, BS, BPS, BSC, BSCorr, BIND, HRO.RO,
                                    BPRIV_SB, BIND2, PKEvf.H.Count, PKEvf.H.HybOrcl, WrapAdv}. 
declare module Pe: PSpke.Prover   {Cv, BS, BP, BSC, BSCorr, HRO.RO, SCorr_Oracle, BPS, BIND,
                                   PKEvf.H.Count, PKEvf.H.HybOrcl, WrapAdv, BPRIV_SB, BIND2 }.
declare module Ve: PSpke.Verifier {Cv, BS, BP, BSC, BSCorr, Pe, HRO.RO, BPS, BIND,
                                   PKEvf.H.Count, PKEvf.H.HybOrcl, WrapAdv, BPRIV_SB, BIND2}.

declare module Pz: Prover         {Cv, Pe, Ve, BP, BS, BSCorr, BIND, HRO.RO, BPS, BSC }.
declare module Vz: Verifier       {Cv, Pe, Ve, Pz, BP, BS, BSCorr, BIND, HRO.RO, BPS, BSC }.
declare module G : GOracle.Oracle {Cv, Pe, Ve, Pz, Vz, BP, HRO.RO, BSC, BPS, BS, BIND, SCorr_Oracle,
                                   BSCorr}.
declare module S : Simulator      {Cv, Pe, Ve, Pz, Vz, G, BS, BP, BSC, BSCorr, HRO.RO, BSC, BPS,
                                   BPRIV_SB, BIND2, BIND, PKEvf.H.Count, PKEvf.H.HybOrcl, WrapAdv}.

(* adversary models *)
declare module A : BPRIV_Adv      {Cv, Pe, Ve, Pz, Vz, G, S, HRO.RO, BP, BS, BSCorr, BSC, BPS,
                                   PKEvf.H.Count, PKEvf.H.HybOrcl, WrapAdv, BPRIV_SB, BIND, BIND2 }.
declare module AC2: SConsis2_Adv {BP, HRO.RO, G, Cv}.
declare module AC3: SConsis3_Adv {BP, HRO.RO, Pe, Ve, Pz, Cv, G}.

(* ** ASSUMPTIONS ** *)
(* ** start *)
  (* at least 2 distinct votes *)
  axiom v_distinct: v_def_0 <> v_def_1.

  (* axiom linking Ve.verify to verify operator *)
  axiom Verify_to_verify (gv: (glob Ve)) (s: h_stm) (p: h_prf):
    phoare[Ve(HRO.RO).verify: (glob Ve) = gv /\ arg = (s, p)
           ==>
         (glob Ve) = gv /\
         res = verify s p HRO.RO.m] = 1%r.

  (* Fixme: change ValidInd, so it can use above *)
  (* verify op is the same as Verifier.verify *)
  axiom Verify_to_verify' (gv: (glob Cv)) (s: h_stm) (p: h_prf):
    phoare[Cv(HRO.RO).verify: (glob Cv) = gv /\ arg = (s, p)
         ==>
         (glob Cv) = gv /\
         res = verify s p HRO.RO.m] = 1%r.

  (* axiom on the state of prover *)
  axiom LPKE_prover_keepstate (gp: (glob Pe)) (H<: HOracle.ARO):
    phoare[Pe(H).prove: 
          (glob Pe) = gp ==> (glob Pe) = gp] = 1%r.

  (* axiom transforming a proof in a verification (two-sided) *)
  axiom Prover_to_verify (s: h_stm) (w: h_wit):
    equiv[Pe(HRO.RO).prove ~ Pe(HRO.RO).prove: 
         ={glob HRO.RO, glob Pe, arg} /\ arg{1} = (s, w)
         ==>
         ={glob HRO.RO, glob Pe, res} /\
         verify s res{1} HRO.RO.m{1}].

  (* axiom transforming a proof in a verification (one-sided) *)
  axiom Prover_to_verify_left (gp: (glob Pe)) (s: h_stm) (w: h_wit):
    phoare[Pe(HRO.RO).prove: 
          (glob Pe) = gp /\ arg = (s, w)
         ==>
         (glob Pe) = gp /\ verify s res HRO.RO.m]= 1%r.

  (* lossless *)
  axiom Gi_ll: islossless G.init. 
  axiom Go_ll: islossless G.o.

  axiom Pz_ll (G <: GOracle.ARO):
    islossless G.o => 
    islossless Pz(G).prove.
  axiom Vz_ll (G <: GOracle.ARO):
    islossless G.o => 
    islossless Vz(G).verify.

  axiom Si_ll: islossless S.init.
  axiom So_ll: islossless S.o.
  axiom Sp_ll: islossless S.prove.

  axiom A1_ll (O <: BPRIV_Oracles{A}):
    islossless O.vote =>
    islossless O.cast =>
    islossless O.board =>
    islossless O.h => 
    islossless O.g => 
    islossless A(O).a1.
  axiom A2_ll (O <: BPRIV_Oracles{A}):
    islossless O.board =>
    islossless O.h => 
    islossless O.g => 
    islossless A(O).a2. 
  axiom AC2_ll (O <: SCons_Oracle{AC2}):
    islossless O.h => 
    islossless O.g => 
    islossless AC2(O).main.
  axiom AS_ll (AS <: SCorr_Adv') 
            (V<: VotingScheme{AS}) 
            (O <: SCorr_Oracle {AS}):
    islossless O.h => 
    islossless O.g => 
    islossless O.test =>
    islossless AS(V,O).main.

  axiom Vval_ll (V<: VotingScheme) (H<: HOracle.ARO) (G<:GOracle.ARO) :
    islossless H.o =>
    islossless G.o =>
    islossless V(H,G).valid.  

  axiom Vvot_ll (V<: VotingScheme) (H<: HOracle.ARO) (G<:GOracle.ARO) :
    islossless H.o =>
    islossless G.o =>
    islossless V(H,G).vote. 

  axiom Pe_ll (H <: HOracle.ARO):
    islossless H.o => 
    islossless Pe(H).prove.
  axiom Ve_ll (H <: HOracle.ARO):
    islossless H.o => 
    islossless Ve(H).verify.

  axiom Cv_ll (H <: HOracle.ARO):
    islossless H.o => 
    islossless Cv(H).verify.

local lemma validInd_ax (gc: (glob ValidInd(Cv))) (pk: pkey) (b: ident * label * cipher):
    phoare[ ValidInd(Cv, HRO.RO).validInd: 
            (glob ValidInd(Cv)) = gc /\ arg = (b, pk) 
            ==>
            (glob ValidInd(Cv)) = gc /\ res = validInd pk b HRO.RO.m] = 1%r.
proof.
  ##5L1
qed.

local lemma C_ll (H <: HOracle.ARO):
    islossless H.o => 
    islossless ValidInd(Cv, H).validInd.
proof.
  ##5L2
qed.   

local lemma enc_to_validInd (pkx: pkey) (id: ident) (v: plain) (l : label):
  equiv[ IPKE(Pe,Ve,HRO.RO).enc ~ IPKE(Pe,Ve,HRO.RO).enc: 
         ={glob HRO.RO, glob IPKE(Pe,Ve), arg} /\ arg{1} = (pkx,l,v) 
         ==> ={res, glob IPKE(Pe,Ve), glob HRO.RO} /\
          validInd pkx (id, l, res{1}) HRO.RO.m{1}].
  proof.
    proc.   
    seq 2 2: (={r, c, p, lbl, pk, glob Pe, glob Ve, glob HRO.RO}/\
              p{1} = v /\
              l = lbl{1}/\
              pkx = pk{2})=>//=;
      first by auto.
    exists* lbl{1}, c{1}, p{1}, r{1}; elim* => lbl c p r.
    call (Prover_to_verify (to_statement pkx lbl c) (to_witness p r)).
    by auto; progress; smt.
qed.


(* bound on the scorr in bpriv by ind1cca *)
lemma scorr_bpriv (LR<: LorR { BS, BP, BIND, BIND2, BSCorr, BSC, 
                                     HRO.RO, A, Ve, Cv, Vz, Pz, Pe, S}) &m:
  Pr[SCorr (HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
            BSCorr(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz),A, LR), 
            HRO.RO, S).main() @ &m: BSC.valid]
  = 
`|Pr[Ind1CCA(IPKE(Pe,Ve),
             INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)), 
                       BSCorr(MV(IPKE(Pe,Ve),Pz,Vz, ValidInd(Cv)),A, LR), S, HRO.RO)),
             HRO.RO,Left).main() @ &m: res /\  size BS.encL <= 1] -
  Pr[Ind1CCA(IPKE(Pe,Ve),
             INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)),
                       BSCorr(MV(IPKE(Pe,Ve),Pz,Vz, ValidInd(Cv)),A, LR), S, HRO.RO)),
             HRO.RO,Right).main()  @ &m: res /\  size BS.encL <= 1]|. 
proof. 
  have ->: Pr[SCorr (HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
                     BSCorr(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz),A, LR), 
                     HRO.RO, S).main() @ &m: BSC.valid] =
           Pr[SCorr (HeliosMix(Pe,Ve, ValidInd(Cv), Pz, Vz), 
                     BSCorr(HeliosMix(Pe,Ve, ValidInd(Cv), Pz, Vz),A, LR), 
                     HRO.RO, S).main() @ &m: BSC.valid].
    by byequiv =>//=; sim.
  by rewrite (scorr_bpriv (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd LR &m).
qed.


(* vfr is 0 for this relation *)
lemma bound_vfr (Gx <: GOracle.Oracle{BS, BP, HRO.RO, A, Ve, Pe, Cv}) &m:
  islossless Gx.init =>
  islossless Gx.o => 
  Pr[VFR(IPKE(Pe, Ve),BVFR(MV(IPKE(Pe, Ve),Pz, Vz,ValidInd(Cv)), A), 
         DecRel(Pe,Ve,IPKE(Pe, Ve)), HRO.RO, Gx).main() @ &m : res] = 0%r.
proof.
  move => Gxi Gxo.
  cut T1:= bound_vfr (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd Gx &m Gxi Gxo.
         
  cut T2:= bound2_vfr (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd Gx &m Gxi Gxo.

  have ->: Pr[VFR(IPKE(Pe, Ve), 
                  BVFR(MV(IPKE(Pe, Ve), Pz, Vz, ValidInd(Cv)), A), 
                  DecRel(Pe,Ve,IPKE(Pe, Ve)), HRO.RO, Gx).main () @ &m : res] =
  ##4L2
qed.

(* lemma bounding bpriv *)
lemma bpriv &m: 
   `|Pr[BPRIV_L(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), A, HRO.RO, G).main() @ &m : res] -
     Pr[BPRIV_R(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), A, HRO.RO, G, S).main() @ &m :res]|
<=
   `|Pr[ZK_L(DecRel(Pe,Ve,IPKE(Pe, Ve), HRO.RO), 
             Pz, BZK(IPKE(Pe, Ve), Pz, ValidInd(Cv), Vz, A, HRO.RO), G).main() @ &m : res] -
     Pr[ZK_R(DecRel(Pe,Ve,IPKE(Pe, Ve), HRO.RO),
             S, BZK(IPKE(Pe, Ve), Pz, ValidInd(Cv), Vz, A, HRO.RO)).main() @ &m : res]| +
n%r *
    `|Pr[Ind1CCA(IPKE(Pe,Ve),
                 INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)), 
                           BSCorr(MV(IPKE(Pe,Ve),Pz,Vz, ValidInd(Cv)),A, Left), S, HRO.RO)),
                 HRO.RO,Left).main() @ &m: res /\  size BS.encL <= 1] -
      Pr[Ind1CCA(IPKE(Pe,Ve),
                 INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)),
                           BSCorr(MV(IPKE(Pe,Ve),Pz,Vz, ValidInd(Cv)),A, Left), S, HRO.RO)),
                 HRO.RO,Right).main() @ &m: res /\  size BS.encL <= 1]| +
n%r *
    `|Pr[Ind1CCA(IPKE(Pe,Ve),
                 INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)), 
                           BSCorr(MV(IPKE(Pe,Ve),Pz,Vz, ValidInd(Cv)),A, Right), S, HRO.RO)),
                 HRO.RO,Left).main() @ &m: res /\  size BS.encL <= 1] -
      Pr[Ind1CCA(IPKE(Pe,Ve),
                 INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)),
                           BSCorr(MV(IPKE(Pe,Ve),Pz,Vz, ValidInd(Cv)),A, Right), S, HRO.RO)),
                 HRO.RO,Right).main() @ &m: res /\  size BS.encL <= 1]| +
n%r *
   `|Pr[Ind1CCA(IPKE(Pe, Ve), 
                WrapAdv(BIND(MV(IPKE(Pe, Ve), Pz, Vz, ValidInd(Cv)), A, S), 
                        IPKE(Pe, Ve), HRO.RO),
                HRO.RO, Left).main() @ &m : res /\ WrapAdv.l <= n /\ size BS.encL <= 1] -
     Pr[Ind1CCA(IPKE(Pe, Ve), 
                WrapAdv(BIND(MV(IPKE(Pe, Ve), Pz, Vz, ValidInd(Cv)), A, S), 
                        IPKE(Pe, Ve), HRO.RO), 
                HRO.RO, Right).main()@ &m : res /\ WrapAdv.l <= n /\ size BS.encL <= 1]|.
proof.
  have ->: Pr[BPRIV_L(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
                      A, HRO.RO, G).main() @ &m : res] =
           Pr[BPRIV_L(HeliosMix(Pe, Ve,  ValidInd(Cv), Pz, Vz), 
                      A, HRO.RO, G).main() @ &m : res].
    by byequiv =>//=; sim.
  have ->: Pr[BPRIV_R(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
                      A, HRO.RO, G, S).main() @ &m : res] =
           Pr[BPRIV_R(HeliosMix(Pe, Ve,  ValidInd(Cv), Pz, Vz), 
                      A, HRO.RO, G, S).main() @ &m : res].
    by byequiv =>//=; sim.
    
  cut oldbpriv := bpriv (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd &m.

  (* make the VFR experiment 0 *)
  by rewrite (bound_vfr G &m Gi_ll Go_ll) (bound_vfr S &m Si_ll So_ll) in oldbpriv.
qed.


(* lemma bounding STRONG CONSITENCY *) 
lemma consis1(id: ident, v: plain, l: label) &m: 
   Pr[SConsis1(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
               CE(IPKE(Pe,Ve)), HRO.RO, G).main(id,v, l) @ &m: res]  >=
   Pr[PKEvf.Correctness(IPKE(Pe,Ve), HRO.RO).main(v,l) @ &m: res].
proof.
  have ->: Pr[SConsis1(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
                       CE(IPKE(Pe,Ve)), HRO.RO, G).main(id,v, l) @ &m: res] =
           Pr[SConsis1(HeliosMix(Pe, Ve, ValidInd(Cv), Pz, Vz), 
                       CE(IPKE(Pe,Ve)), HRO.RO, G).main(id,v, l) @ &m: res].
    by byequiv =>//=; sim.

  by rewrite (consis1 (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd id v l &m).
qed.

lemma consis2 &m:
  Pr[SConsis2(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
              ValidInd(Cv), AC2, HRO.RO, G).main() @ &m: res] = 1%r.
proof. 
  have ->: Pr[SConsis2(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
                       ValidInd(Cv), AC2, HRO.RO, G).main() @ &m: res] =
           Pr[SConsis2(HeliosMix(Pe, Ve, ValidInd(Cv), Pz, Vz), 
                       ValidInd(Cv), AC2, HRO.RO, G).main() @ &m: res].
    by byequiv =>//=; sim.

  by rewrite (consis2 (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd &m).
qed.

equiv consis3 &m:
    SConsis3_L(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
               ValidInd(Cv), AC3, HRO.RO, G).main ~ 
    SConsis3_R(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
               CE(IPKE(Pe,Ve)), ValidInd(Cv), AC3, HRO.RO, G).main
    : ={glob HRO.RO, glob G, glob IPKE(Pe,Ve), 
        glob ValidInd(Cv), glob Pz, glob AC3} ==> ={res}.
proof.

  transitivity SConsis3_L(HeliosMix(Pe, Ve, ValidInd(Cv), Pz, Vz), 
                          ValidInd(Cv), AC3, HRO.RO, G).main 
  (={glob HRO.RO, glob G, glob IPKE(Pe,Ve), glob ValidInd(Cv), glob Pz, glob AC3} ==> 
   ={res})
  (={glob HRO.RO, glob G, glob IPKE(Pe,Ve), glob ValidInd(Cv), glob Pz, glob AC3} ==> 
   ={res})=>//=. 

  + by progress; smt.
  + proc; sim. 
  
  transitivity SConsis3_R(HeliosMix(Pe, Ve, ValidInd(Cv), Pz, Vz), 
                          CE(IPKE(Pe,Ve)), ValidInd(Cv), AC3, HRO.RO, G).main 
  (={glob HRO.RO, glob G, glob IPKE(Pe,Ve), glob ValidInd(Cv), glob Pz, glob AC3} ==> 
   ={res})
  (={glob HRO.RO, glob G, glob IPKE(Pe,Ve), glob ValidInd(Cv), glob Pz, glob AC3} ==> 
   ={res})=>//=. 

  + by progress; smt.

  + by rewrite (consis3 (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd &m).
  by sim. 
qed.

(* lemma bounding STRONG CORRECTNESS *)
lemma scorr_bound (AS <: SCorr_Adv' { IPKE(Pe,Ve), Pz, Vz, Cv, HRO.RO, BSC, BS, G}) &m:
  Pr[SCorr(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
           AS(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz)), HRO.RO, G).main() @ &m: BSC.valid] = 
`|Pr[Ind1CCA(IPKE(Pe,Ve), 
             INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)), 
                       AS(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv))), G, HRO.RO)), 
             HRO.RO,Left).main() @ &m: res /\  size BS.encL <= 1] -
  Pr[Ind1CCA(IPKE(Pe,Ve), 
             INDB(Bmem(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv)), 
                       AS(MV(IPKE(Pe,Ve), Pz, Vz, ValidInd(Cv))), G, HRO.RO)),
             HRO.RO,Right).main()  @ &m: res /\  size BS.encL <= 1]|.
proof.  
  have ->: Pr[SCorr(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz), 
                    AS(HeliosMixGeneric(Pe, Ve, Cv, Pz, Vz)), 
                    HRO.RO, G).main() @ &m: BSC.valid] =
           Pr[SCorr(HeliosMix(Pe,Ve, ValidInd(Cv), Pz, Vz), 
                    AS(HeliosMix(Pe,Ve, ValidInd(Cv),Pz,Vz)), 
                    HRO.RO, G).main() @ &m: BSC.valid].
    by byequiv =>//=; sim.

  by rewrite (scorr (ValidInd(Cv)) Pe Ve Pz Vz G S (<: DecRel(Pe,Ve)) A AC2 AC3
                    v_distinct Verify_to_verify LPKE_prover_keepstate Prover_to_verify 
                    Prover_to_verify_left validInd_ax Gi_ll Go_ll Pz_ll Vz_ll Si_ll So_ll 
                    Sp_ll A1_ll A2_ll AC2_ll AS_ll Vval_ll Vvot_ll Pe_ll Ve_ll C_ll 
                    (relCons Pe Ve (Ve_ll HRO.RO HRO.RO_o_ll)) enc_to_validInd AS &m).
qed.

end section Security.
